from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from output.bot.database.db import AsyncSessionLocal
from output.bot.database.repository import *
from output.bot.config import admin_ids
from output.bot.keyboards.keyboard_admin import main_admin_keyboard, analytic_keyboard, back_to_analytic_keyboard, \
    login_search_keyboard
from output.bot.states.state import BonusRefState, CountSymbolsState, BonusDayState, SearchUserState, UpdateSymbols, \
    UpdateMonth, NewsletterText
from output.bot.config import state_bot, users_per_page

router = Router()


@router.message(Command("admin"))
async def handle_admin(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin"""
    async with AsyncSessionLocal() as db:
        await state.clear()  # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        admin = await get_admin_user(message.chat.id, db)

        if message.chat.id not in admin_ids and admin != 'admin':
            await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
            return

        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_admin_keyboard())


@router.callback_query(F.data == "analytics")
async def handle_bot_analytics(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞"""
    async with AsyncSessionLocal() as db:
        text = '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä'
        count = await count_total_users(db)
        this_month = await count_new_users_this_month(db)
        last_month = await count_new_users_last_month(db)
        today_activity = await count_active_users_today(db)
        block_bot = await count_blocked_users(db)
        count_admins = await get_all_admin_from_bd(db)

        text += f'\n\nüî¢ –û–±—â–µ–µ'
        text += f'\n‚îî –ö–æ–ª-–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π = {count}'
        text += f'\n‚îî –ö–æ–ª-–≤–æ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü = {this_month}'
        text += f'\n‚îî –ö–æ–ª-–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –ø—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü = {last_month}'
        text += f'\n‚îî –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞ = {block_bot}'
        text += f'\n‚îî –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–µ–≥–æ–¥–Ω—è = {today_activity}'
        text += f'\n‚îî –ö–æ–ª-–≤–æ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ = {len(admin_ids)}'
        text += f'\n‚îî –ö–æ–ª-–≤–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ = {count_admins}'

        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        await callback_query.message.edit_text(text, reply_markup=analytic_keyboard())


@router.callback_query(F.data == "ref_bonus")
async def handle_ref_bonus(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–†–µ—Ñ –±–æ–Ω—É—Å"""
    await callback_query.answer()
    await callback_query.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª-–≤–æ –±–æ–Ω—É—Å–æ–≤ –∑–∞ —Ä–µ—Ñ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ')
    await state.set_state(BonusRefState.ref)  # –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ref_bonus_state


@router.message(BonusRefState.ref)
async def bon_state_ref(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –†–µ—Ñ –±–æ–Ω—É—Å–∞"""
    async with AsyncSessionLocal() as db:
        try:
            new_bonus_count = int(message.text)
            if new_bonus_count < 0:
                await message.reply("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–Ω—É—Å–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º.")
                return
            await update_bonus_ref(new_bonus_count, db)

            await message.reply(f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–Ω—É—Å–æ–≤ –∑–∞ —Ä–µ—Ñ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {new_bonus_count}',
                                reply_markup=back_to_analytic_keyboard())
            await state.clear()  # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        except ValueError:
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")


@router.callback_query(F.data == "count_symbols")
async def handle_count_symbols(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∫–æ–ª-–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ """
    await callback_query.answer()
    await callback_query.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª-–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –∑–∞ –∑–∞–ø—Ä–æ—Å')
    await state.set_state(CountSymbolsState.count)  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–∏–º–≤–æ–ª–æ–≤


@router.message(CountSymbolsState.count)
async def count_symbols_state(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–ª-–≤–æ —Å–∏–º–≤–æ–ª–æ–≤"""
    async with AsyncSessionLocal() as db:
        try:
            new_count = int(message.text)
            if new_count < 0:
                await message.reply("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º.")
                return
            await update_count_symbol(new_count, db)
            await message.reply(f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –∑–∞ –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {new_count}',
                                reply_markup=back_to_analytic_keyboard())
            await state.clear()  # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
        except ValueError:
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")


@router.callback_query(F.data == "bonus_day")
async def handle_day_bonus(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å"""
    await callback_query.answer()
    await callback_query.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª-–≤–æ –±–æ–Ω—É—Å–æ–≤ –∑–∞ –¥–µ–Ω—å')
    await state.set_state(BonusDayState.bonus)  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ –±–æ–Ω—É—Å–æ–≤ –∑–∞ –¥–µ–Ω—å


@router.message(BonusDayState.bonus)
async def bon_state(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞"""
    async with AsyncSessionLocal() as db:
        try:
            new_bonus_count = int(message.text)
            if new_bonus_count < 0:
                await message.reply("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–Ω—É—Å–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º.")
                return
            await update_bonus(new_bonus_count, db)
            await message.reply(f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–Ω—É—Å–æ–≤ –∑–∞ –¥–µ–Ω—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {new_bonus_count}',
                                reply_markup=back_to_analytic_keyboard())
            await state.clear()  # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
        except ValueError:
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")


async def send_users_page(callback_query: types.CallbackQuery, page: int):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    async with AsyncSessionLocal() as db:
        users = await get_all_users(db)

        if not users:
            await callback_query.message.edit_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=None)
            return

        start_index = page * users_per_page
        end_index = min(start_index + users_per_page, len(users))
        user_names = users[start_index:end_index]

        keyboard = InlineKeyboardBuilder()

        for user_id, user_name in user_names:
            keyboard.add(InlineKeyboardButton(text=user_name, callback_data=f'select_user_{user_id}_{user_name}'))

        # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        if page > 0:
            keyboard.row(InlineKeyboardButton(text="‚è™ –ù–∞–∑–∞–¥", callback_data=f'page_{page - 1}'))
        if end_index < len(users):
            keyboard.row(InlineKeyboardButton(text="–î–∞–ª—å—à–µ ‚è©", callback_data=f'page_{page + 1}'))

        # –î–æ–ø. –∫–Ω–æ–ø–∫–∏
        keyboard.row(
            InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø–æ –ª–æ–≥–∏–Ω—É", callback_data='search_by_username'),
            InlineKeyboardButton(text="üè† –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='analytics')
        )

        await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=keyboard.as_markup())


@router.callback_query(F.data == "search_user")
async def handle_bot_search_user(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' """
    await callback_query.answer()
    await send_users_page(callback_query, 0)


@router.callback_query(F.data.startswith("page_"))
async def handle_pagination(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ '–î–∞–ª—å—à–µ' –∏ '–ù–∞–∑–∞–¥' –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü"""
    await callback_query.answer()
    page = int(callback_query.data.split("_")[1])
    await send_users_page(callback_query, page)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–∏—Å–∫ –ø–æ –ª–æ–≥–∏–Ω—É"
@router.callback_query(lambda call: call.data == "search_by_username")
async def handle_search_by_username(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()

    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=login_search_keyboard())
    await state.set_state(SearchUserState.InputUsername)  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤–≤–æ–¥–∞ –ª–æ–≥–∏–Ω–∞


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ª–æ–≥–∏–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(SearchUserState.InputUsername)
async def handle_username_input(message: types.Message, state: FSMContext):
    async with AsyncSessionLocal() as db:
        username = message.text
        users = await get_all_users(db)

        found_users = [(user_id, user_name) for user_id, user_name in users if username.lower() in user_name.lower()]
        print(found_users)
        if found_users:
            keyboard = InlineKeyboardBuilder()
            for user_id, user_name in found_users:
                keyboard.add(InlineKeyboardButton(text=user_name, callback_data=f'select_user_{user_id}_{user_name}'))
                keyboard.adjust(1)
            await message.reply("–ù–∞–π–¥–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:", reply_markup=keyboard.as_markup())
        else:
            keyboard = InlineKeyboardBuilder()
            keyboard.add(InlineKeyboardButton(text='–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data='search_user'))
            await message.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=keyboard.as_markup())

        await state.clear()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–∏—Å–∫–∞


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.callback_query(F.data.startswith('select_user_'))
async def handle_select_user(callback_query: types.CallbackQuery, state: FSMContext):
    async with AsyncSessionLocal() as db:
        await callback_query.answer()

        # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ–ª–±—ç–∫–∞ –ø–æ —Å–∏–º–≤–æ–ª—É '_'
        data_parts = callback_query.data.split('_')

        # –ü–æ–ª—É—á–µ–Ω–∏–µ user_id –∏ user_name
        user_id = int(data_parts[2])
        user_name = '_'.join(data_parts[3:])  # –í—Å–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —á–∞—Å—Ç–∏ –æ–±—ä–µ–¥–∏–Ω—è—é—Ç—Å—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è user_name

        count_symbols = await get_symbols(user_id, db)
        request_month = await get_request_month(user_id=user_id, db=db)
        unlimited = await get_unlimited_person(user_id, db)
        role = await get_role_user(user_id, db)
        status = await get_status_user(user_id, db)

        keyboard = InlineKeyboardBuilder()
        text = f'ID: <b>{user_id}</b>'
        text += f'\n–õ–æ–≥–∏–Ω: <b> @{user_name}</b>'
        text += f'\n–ö–æ–ª-–≤–æ —Å–∏–º–≤–æ–ª–æ–≤: <b>{count_symbols}</b>'
        text += f'\n–ö–æ–ª-–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å: <b>{request_month}</b>'

        if unlimited == 'ON':
            text += '\n–ë–µ–∑–ª–∏–º–∏—Ç: <b>–≤–∫–ª—é—á–µ–Ω</b>'
            unl_btn = InlineKeyboardButton(text='–û—Ç–∫–ª—é—á–∏—Ç—å –±–µ–∑–ª–∏–º–∏—Ç',
                                           callback_data=f'off_unlimited_{user_id}_{user_name}')
        else:
            text += '\n–ë–µ–∑–ª–∏–º–∏—Ç: <b>–æ—Ç–∫–ª—é—á–µ–Ω</b>'
            unl_btn = InlineKeyboardButton(text='–í–∫–ª—é—á–∏—Ç—å –±–µ–∑–ª–∏–º–∏—Ç',
                                           callback_data=f'on_unlimited_{user_id}_{user_name}')

        if role == 'user':
            text += f'\n\n–†–æ–ª—å: <b>–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</b>'
            role_btn = InlineKeyboardButton(text=f'–ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º',
                                            callback_data=f'appoint_admin_{user_id}_{user_name}')
        else:
            text += f'\n\n–†–æ–ª—å: <b>–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</b>'
            role_btn = InlineKeyboardButton(text=f'–ù–∞–∑–Ω–∞—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º',
                                            callback_data=f'appoint_user_{user_id}_{user_name}')

        if status == 'join':
            status_btn = InlineKeyboardButton(text=f'–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å', callback_data=f'block_user_{user_id}_{user_name}')
        else:
            status_btn = InlineKeyboardButton(text=f'–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å',
                                              callback_data=f'unblock_user_{user_id}_{user_name}')

        keyboard.add(role_btn)
        keyboard.add(status_btn)
        keyboard.add(
            InlineKeyboardButton(text=f'–û–±–Ω–æ–≤–∏—Ç—å –∫–æ–ª-–≤–æ —Å–∏–º–≤–æ–ª–æ–≤', callback_data=f'upsymbols_{user_id}_{user_name}'))
        keyboard.add(
            InlineKeyboardButton(text=f'–û–±–Ω–æ–≤–∏—Ç—å –∫–æ–ª-–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å',
                                 callback_data=f'upmonth_{user_id}_{user_name}'))
        keyboard.add(unl_btn)
        keyboard.add(InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚è™", callback_data='search_user'))
        keyboard.adjust(1)
        await callback_query.message.edit_text(text, reply_markup=keyboard.as_markup(), parse_mode='html')


# –ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
@router.callback_query(F.data.startswith('appoint_admin_'))
async def handle_appoint_admin(callback_query: types.CallbackQuery, state: FSMContext):
    async with AsyncSessionLocal() as db:
        user_name = callback_query.data.split('_')[-1]
        user_id = int(callback_query.data.split('_')[-2])
        await update_role_user_admin(user_id, db)
        keyboard = InlineKeyboardBuilder()
        keyboard.add(InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚è™", callback_data=f'select_user_{user_id}_{user_name}'))
        await callback_query.message.edit_text('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º',
                                               reply_markup=keyboard.as_markup(),
                                               parse_mode='html')
        await callback_query.answer()


## –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.callback_query(F.data.startswith('appoint_user_'))
async def handle_appoint_user(callback_query: types.CallbackQuery, state: FSMContext):
    async with AsyncSessionLocal() as db:
        user_name = callback_query.data.split('_')[-1]
        user_id = int(callback_query.data.split('_')[-2])
        await update_role_user_person(user_id, db)
        keyboard = InlineKeyboardBuilder()
        keyboard.add(InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚è™", callback_data=f'select_user_{user_id}_{user_name}'))
        await callback_query.message.edit_text('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤',
                                               reply_markup=keyboard.as_markup(),
                                               parse_mode='html')
        await callback_query.answer()


# –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.callback_query(F.data.startswith('block_user_'))
async def handle_block_user(callback_query: types.CallbackQuery, state: FSMContext):
    async with AsyncSessionLocal() as db:
        user_name = callback_query.data.split('_')[-1]
        user_id = int(callback_query.data.split('_')[-2])
        await update_status_kick(user_id, db)
        keyboard = InlineKeyboardBuilder()
        keyboard.add(InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚è™", callback_data=f'select_user_{user_id}_{user_name}'))
        await callback_query.message.edit_text('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω', reply_markup=keyboard.as_markup(),
                                               parse_mode='html')
        await callback_query.answer()


# –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.callback_query(F.data.startswith('unblock_user_'))
async def handle_unblock_user(callback_query: types.CallbackQuery, state: FSMContext):
    async with AsyncSessionLocal() as db:
        user_name = callback_query.data.split('_')[-1]
        user_id = int(callback_query.data.split('_')[-2])
        await update_status_join(user_id, db)
        keyboard = InlineKeyboardBuilder()
        keyboard.add(InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚è™", callback_data=f'select_user_{user_id}_{user_name}'))
        await callback_query.message.edit_text('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω', reply_markup=keyboard.as_markup(),
                                               parse_mode='html')
        await callback_query.answer()


# –í–∫–ª—é—á–∏—Ç—å –±–µ–∑–ª–∏–º–∏—Ç
@router.callback_query(F.data.startswith('off_unlimited_'))
async def handle_off_unlimited(callback_query: types.CallbackQuery, state: FSMContext):
    async with AsyncSessionLocal() as db:
        user_name = callback_query.data.split('_')[-1]
        user_id = int(callback_query.data.split('_')[-2])
        await update_unlimited_off(user_id, db)
        keyboard = InlineKeyboardBuilder()
        keyboard.add(InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚è™", callback_data=f'select_user_{user_id}_{user_name}'))
        await callback_query.message.edit_text('–ë–µ–∑–ª–∏–º–∏—Ç –æ—Ç–∫–ª—é—á–µ–Ω', reply_markup=keyboard.as_markup(),
                                               parse_mode='html')
        await callback_query.answer()


# –í—ã–∫–ª—é—á–∏—Ç—å –±–µ–∑–ª–∏–º–∏—Ç
@router.callback_query(F.data.startswith('on_unlimited_'))
async def handle_on_unlimited(callback_query: types.CallbackQuery, state: FSMContext):
    async with AsyncSessionLocal() as db:
        user_name = callback_query.data.split('_')[-1]
        user_id = int(callback_query.data.split('_')[-2])
        await update_unlimited_on(user_id, db)
        keyboard = InlineKeyboardBuilder()
        keyboard.add(InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚è™", callback_data=f'select_user_{user_id}_{user_name}'))
        await callback_query.message.edit_text('–ë–µ–∑–ª–∏–º–∏—Ç –≤–∫–ª—é—á–µ–Ω', reply_markup=keyboard.as_markup(), parse_mode='html')
        await callback_query.answer()


# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª-–≤–æ —Å–∏–º–≤–æ–ª–æ–≤
@router.callback_query(F.data.startswith('upsymbols_'))
async def handle_update(callback_query: types.CallbackQuery, state: FSMContext):
    user_name = callback_query.data.split('_')[-1]
    user_id = int(callback_query.data.split('_')[1])
    await callback_query.message.answer(f'–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è {user_name}')
    await callback_query.answer()
    await state.update_data(user_id=user_id, user_name=user_name)
    await state.set_state(UpdateSymbols.symbols)


# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª-–≤–æ —Å–∏–º–≤–æ–ª–æ–≤
@router.message(UpdateSymbols.symbols)
async def update_symbols(message: types.Message, state: FSMContext):
    async with AsyncSessionLocal() as db:
        new_symbols = int(message.text)
        data = await state.get_data()
        user_id = data.get('user_id')
        user_name = data.get('user_name')
        await update_user_symbols(user_id, new_symbols, db)
        keyboard = InlineKeyboardBuilder()
        keyboard.add(InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚è™", callback_data=f'select_user_{user_id}_{user_name}'))
        await message.answer(f'–ó–Ω–∞—á–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {new_symbols}',
                             reply_markup=keyboard.as_markup())
        await state.clear()


# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª-–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤
@router.callback_query(F.data.startswith('upmonth_'))
async def handle_update_month(callback_query: types.CallbackQuery, state: FSMContext):
    user_name = callback_query.data.split('_')[-1]
    user_id = int(callback_query.data.split('_')[1])
    await callback_query.message.answer(f'–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª-–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å –¥–ª—è {user_name}')
    await callback_query.answer()
    await state.update_data(user_id=user_id, user_name=user_name)
    await state.set_state(UpdateMonth.month)


@router.message(UpdateMonth.month)
async def update_month(message: types.Message, state: FSMContext):
    async with AsyncSessionLocal() as db:
        new_request_month = message.text
        data = await state.get_data()
        user_id = data.get('user_id')
        user_name = data.get('user_name')
        await update_user_request_month(user_id, new_request_month, db)
        keyboard = InlineKeyboardBuilder()
        keyboard.add(InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚è™", callback_data=f'select_user_{user_id}_{user_name}'))
        await message.answer(f"–ö–æ–ª-–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–æ  = {new_request_month}", reply_markup=keyboard.as_markup())
        await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞—Å—Å—ã–ª–∫–∏
@router.callback_query(F.data == "newsletter")
async def handle_bot_newsletter(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    await state.set_state(NewsletterText.text)
    keyboard = InlineKeyboardBuilder()
    keyboard.add(InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é', callback_data='back_menu'))
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:", reply_markup=keyboard.as_markup())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ –∏ —Ñ–æ—Ç–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
@router.message(NewsletterText.text)
async def process_mixed_content(message: types.Message, state: FSMContext):
    async with AsyncSessionLocal() as db:
        text = message.caption or message.text
        photo = message.photo[-1].file_id if message.photo else None
        await state.clear()

        all_user_ids = await get_all_user_ids(db)

        for user_id in all_user_ids:
            try:
                if text and photo:
                    await message.bot.send_photo(user_id, photo, caption=text)
                elif text:
                    await message.bot.send_message(user_id, text, parse_mode="MarkdownV2",
                                                   disable_web_page_preview=True)
                elif photo:
                    await message.bot.send_photo(user_id, photo)


                elif message.voice:

                    # –ü–æ–ª—É—á–∞–µ–º file_id –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è

                    voice_file_id = message.voice.file_id

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

                    await message.bot.send_voice(chat_id=user_id, voice=voice_file_id)

            except Exception as e:
                print(f"Failed to send mixed content newsletter to user {user_id}: {e}")

        await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
        keyboard = InlineKeyboardBuilder()
        keyboard.add(
            InlineKeyboardButton(text="–°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ ü§ñ", callback_data='status'),
            InlineKeyboardButton(text="–†–∞—Å—Å—ã–ª–∫–∞ üìù", callback_data='newsletter'),
            InlineKeyboardButton(text="–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ üìä", callback_data='analytics')
        )

        await message.bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard.as_markup())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
@router.callback_query(F.data == "back_menu")
async def handle_bot_back(callback_query: types.CallbackQuery, state: FSMContext):
    await state.clear()
    chat_id = callback_query.from_user.id
    message_id = callback_query.message.message_id

    await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é", reply_markup=main_admin_keyboard())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
@router.callback_query(F.data == "status")
async def handle_bot_state(callback_query: types.CallbackQuery):
    if state_bot:
        keyboard = InlineKeyboardBuilder()
        keyboard.add(InlineKeyboardButton(text="–í—ã–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞ üî¥", callback_data='toggle_off'))
        keyboard.add(InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='back_menu'))
        await callback_query.message.edit_text("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –≤–∫–ª—é—á–µ–Ω üü¢", reply_markup=keyboard.as_markup())
    else:
        keyboard = InlineKeyboardBuilder()
        keyboard.add(InlineKeyboardButton(text="–í–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞ üü¢", callback_data='toggle_on'))
        keyboard.add(InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='back_menu'))
        await callback_query.message.edit_text("–ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω üî¥", reply_markup=keyboard.as_markup())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è –±–æ—Ç–∞
@router.callback_query(F.data.startswith("toggle_"))
async def toggle_bot(callback_query: types.CallbackQuery):
    global state_bot

    if callback_query.data == "toggle_on":
        state_bot = True
        await handle_bot_state(callback_query)
    elif callback_query.data == "toggle_off":
        state_bot = False
        await handle_bot_state(callback_query)
