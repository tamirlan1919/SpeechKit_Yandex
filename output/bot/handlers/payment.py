# –ö–æ–º–∞–Ω–¥–∞ /buy
import json
import sqlite3

from output.bot.config import *
from aiogram import Router, F
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, PreCheckoutQuery, Message, \
    LabeledPrice
from output.bot.database.repository import process_payment, get_symbols_from_subscriptions
from output.bot.database.db import AsyncSessionLocal
from output.bot.keyboards.keyboard_user import get_pay_keyboard

router = Router()


@router.message(Command('buy'))
async def buy_credits(message: Message):
    await message.answer(
        "üí≥ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —Å–∏–º–≤–æ–ª–æ–≤</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ:\n"
        "- <b>20 000 —Å–∏–º–≤–æ–ª–æ–≤</b> ‚Äî 150 —Ä—É–±–ª–µ–π (~15 –º–∏–Ω—É—Ç –æ–∑–≤—É—á–∫–∏)\n"
        "- <b>100 000 —Å–∏–º–≤–æ–ª–æ–≤</b> ‚Äî 600 —Ä—É–±–ª–µ–π (~75 –º–∏–Ω—É—Ç –æ–∑–≤—É—á–∫–∏)\n"
        "- <b>300 000 —Å–∏–º–≤–æ–ª–æ–≤</b> ‚Äî 1 500 —Ä—É–±–ª–µ–π (~225 –º–∏–Ω—É—Ç –æ–∑–≤—É—á–∫–∏)\n\n"
        "üîπ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —Ç–∞—Ä–∏—Ñ –∏ –æ–ø–ª–∞—Ç–∏—Ç—å.",
        reply_markup=get_pay_keyboard(), parse_mode=ParseMode.HTML
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ —Ç–∞—Ä–∏—Ñ–æ–≤
@router.callback_query(F.data.in_({"20k_symbols", "100k_symbols", "300k_symbols"}))
async def tarif_handler(callback_query: CallbackQuery):
    tariffs = {
        "20k_symbols": {
            "title": "20 000 —Å–∏–º–≤–æ–ª–æ–≤",
            "description": "–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∞—Ä–∏—Ñ 20 000 —Å–∏–º–≤–æ–ª–æ–≤ –∑–∞ 150 —Ä—É–±–ª–µ–π.–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Å–∏–º–≤–æ–ª—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.",
            "payload": "small_tariff",
            "amount": 100_00  # 150 —Ä—É–±–ª–µ–π –≤ –∫–æ–ø–µ–π–∫–∞—Ö
        },
        "100k_symbols": {
            "title": "100 000 —Å–∏–º–≤–æ–ª–æ–≤",
            "description": "–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∞—Ä–∏—Ñ 100 000 —Å–∏–º–≤–æ–ª–æ–≤ –∑–∞ 600 —Ä—É–±–ª–µ–π.–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Å–∏–º–≤–æ–ª—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.",
            "payload": "middle_tariff",
            "amount": 600_00  # 600 —Ä—É–±–ª–µ–π –≤ –∫–æ–ø–µ–π–∫–∞—Ö
        },
        "300k_symbols": {
            "title": "300 000 —Å–∏–º–≤–æ–ª–æ–≤",
            "description": "–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∞—Ä–∏—Ñ 300 000 —Å–∏–º–≤–æ–ª–æ–≤ –∑–∞ 1500 —Ä—É–±–ª–µ–π.–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Å–∏–º–≤–æ–ª—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.",
            "payload": "large_tariff",
            "amount": 1500_00  # 1 500 —Ä—É–±–ª–µ–π –≤ –∫–æ–ø–µ–π–∫–∞—Ö
        }
    }

    tariff = tariffs.get(callback_query.data)
    if not tariff:
        await callback_query.message.answer("–û—à–∏–±–∫–∞: —Ç–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    provider_data = {
        "receipt": {
            "items": [
                {
                    "description": tariff["description"],
                    "quantity": "1.00",
                    "amount": {
                        "value": f"{tariff['amount'] / 100:.2f}",  # –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–ø–µ–π–∫–∏ –≤ —Ä—É–±–ª–∏
                        "currency": "RUB"
                    },
                    "vat_code": "1",  # –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —É–∫–∞–∂–∏—Ç–µ –≤–∞—à—É —Å—Ç–∞–≤–∫—É –ù–î–°
                    "payment_mode": "full_prepayment",  # —Ä–µ–∂–∏–º –æ–ø–ª–∞—Ç—ã
                    "payment_subject": "service"  # –ø—Ä–∏–∑–Ω–∞–∫ –ø—Ä–µ–¥–º–µ—Ç–∞ —Ä–∞—Å—á—ë—Ç–∞
                }
            ],
        }
    }
    await callback_query.answer()
    await callback_query.message.answer_invoice(
        title=tariff["title"],
        description=tariff["description"],
        payload=tariff["payload"],
        provider_token=PAYMENTS_PROVIDER_TOKEN,
        currency="RUB",
        prices=[LabeledPrice(label=tariff["title"], amount=tariff["amount"])],
        need_email=True,
        need_phone_number=True,
        send_email_to_provider=True,
        send_phone_number_to_provider=True,
        provider_data=json.dumps(provider_data)
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ pre-checkout –∑–∞–ø—Ä–æ—Å–∞
@router.pre_checkout_query()
async def pre_checkout(pre_checkout_q: PreCheckoutQuery):
    await pre_checkout_q.answer(ok=True)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
@router.message(F.successful_payment)
async def successful_payment(message: Message):
    user_id = int(message.from_user.id)
    payload = message.successful_payment.invoice_payload

    tariffs = {
        "small_tariff": {"symbols": 20000, "name": "20 000 —Å–∏–º–≤–æ–ª–æ–≤"},
        "middle_tariff": {"symbols": 100000, "name": "100 000 —Å–∏–º–≤–æ–ª–æ–≤"},
        "large_tariff": {"symbols": 300000, "name": "300 000 —Å–∏–º–≤–æ–ª–æ–≤"}
    }

    tariff = tariffs.get(payload)
    if tariff is None:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–ª–∞—Ç—ë–∂.")
        return

    total_symbols = tariff["symbols"]
    tariff_name = tariff["name"]

    user_email = message.successful_payment.order_info.email
    user_phone = message.successful_payment.order_info.phone_number

    amount = message.successful_payment.total_amount / 100  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–ø–µ–π–∫–∏ –≤ —Ä—É–±–ª–∏
    currency = message.successful_payment.currency
    transaction_id = message.successful_payment.provider_payment_charge_id

    # –°–æ–∑–¥–∞—ë–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é –∏ –≤—ã–∑—ã–≤–∞–µ–º process_payment
    async with AsyncSessionLocal() as session:
        await process_payment(
            user_id=user_id,
            total_symbols=total_symbols,
            email=user_email,
            phone=user_phone,
            tariff_name=tariff_name,
            amount=amount,
            currency=currency,
            transaction_id=transaction_id,
            session=session
        )

        user_symbols = await get_symbols_from_subscriptions(user_id, session)

    await message.answer(f'''‚úÖ <b>–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>

üî¢ <b>–ë–∞–ª–∞–Ω—Å —Å–∏–º–≤–æ–ª–æ–≤: {user_symbols}</b>

üîπ –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏–º–≤–æ–ª—ã –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, –∏ —è –æ–∑–≤—É—á—É –µ–≥–æ –¥–ª—è –≤–∞—Å!

üí° –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–π –±–∞–ª–∞–Ω—Å —Å–∏–º–≤–æ–ª–æ–≤ –∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã: /account''', parse_mode=ParseMode.HTML)

