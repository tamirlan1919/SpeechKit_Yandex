import io
import grpc
import pydub
import argparse
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.types import ParseMode
from aiogram.contrib.middlewares.logging import LoggingMiddleware
import asyncio
from aiogram.types import Chat
from config import *
import yandex.cloud.ai.tts.v3.tts_pb2 as tts_pb2
import yandex.cloud.ai.tts.v3.tts_service_pb2_grpc as tts_service_pb2_grpc
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types.web_app_info import WebAppInfo
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
import tempfile
from base import *
from aiogram.utils.exceptions import ChatNotFound

class VoiceSelection(StatesGroup):
    Choosing = State()
    FormatChoosing = State()

API_TOKEN = TOKEN

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

dp.middleware.setup(LoggingMiddleware())



create_db()

voice_descriptions = {
    'alena': '–ê–ª—ë–Ω–∞ üíÖ',
    'filipp': '–§–∏–ª–∏–ø–ø üë§',
    'ermil': '–ï—Ä–º–∏–ª üë§',
    'jane': '–î–∂–µ–π–Ω üíÖ',
    'madirus': '–ú–∞–¥–∏—Ä–∞—Å üë§',
    'omazh': '–û–º–∞–∂ üë§',
    'zahar': '–ó–∞—Ö–∞—Ä üë§',
    'dasha': '–î–∞—à–∞ üíÖ',
    'julia': '–Æ–ª–∏—è üíÖ',
    'lera': '–õ–µ—Ä–∞ üíÖ',
    'masha': '–ú–∞—à–∞ üíÖ',
    'marina': '–ú–∞—Ä–∏–Ω–∞ üíÖ',
    'alexander': '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä üë§',
    'kirill': '–ö–∏—Ä–∏–ª–ª üë§',
    'anton': '–ê–Ω—Ç–æ–Ω üë§'
}

def generate_voice_keyboard():
    keyboard = types.InlineKeyboardMarkup()
    voices = list(voice_descriptions.keys())  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π —Å–ª–æ–≤–∞—Ä—è
    for i in range(0, len(voices), 3):
        row = []
        for voice in voices[i:i+3]:
            description = voice_descriptions.get(voice, voice)  # –ï—Å–ª–∏ –æ–ø–∏—Å–∞–Ω–∏—è –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∞–º –≥–æ–ª–æ—Å
            row.append(types.InlineKeyboardButton(text=description, callback_data=f"voice_{voice}"))
        keyboard.row(*row)
    return keyboard

@dp.message_handler(commands=['start'], state="*")
async def handle_start(message: types.Message):
    # –¢–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —ç–º–æ–¥–∑–∏
    welcome_text = "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –≤ —Ä–µ—á—å. " \
                   "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç, –∏ —è —Å–æ–∑–¥–∞–º –¥–ª—è —Ç–µ–±—è –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! üé§"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –µ–≥–æ –≤ —Ä–µ—á—å
    await bot.send_message(message.chat.id, welcome_text)

@dp.message_handler(commands=['admin'], state="*")
async def handle_admin(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    print(message.chat.id in admin_ids)
    if message.chat.id not in admin_ids:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    keyboard.add(types.KeyboardButton(text="–°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞"), types.KeyboardButton(text="–†–∞—Å—Å—ã–ª–∫–∞"),
                 types.KeyboardButton(text="–ê–Ω–∞–ª–∏—Ç–∏–∫–∞"))

    await bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)


@dp.message_handler(commands=['set_voice'], state="*")
async def handle_setVoice(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(row_width=1,resize_keyboard=True) #—Å–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    webAppTest = types.WebAppInfo(url = "https://ui-telegrab-bot.vercel.app/") #—Å–æ–∑–¥–∞–µ–º webappinfo - —Ñ–æ—Ä–º–∞—Ç —Ö—Ä–∞–Ω–µ–Ω–∏—è url
    one_butt = types.KeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏", web_app=webAppTest) #—Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Ç–∏–ø–∞ webapp
    keyboard.add(one_butt) #–¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É


    # keyboard = types.ReplyKeyboardMarkup()
    # keyboard.add("–ü–µ—Ä–µ–π—Ç–∏", web_app=WebAppInfo(url = 'https://ui-telegrab-bot.vercel.app/'))
    await bot.send_message(message.chat.id, '–í—ã –¥–æ–ª–∂–Ω—ã –≤—ã–±—Ä–∞—Ç—å –≥–æ–ª–æ—Å', reply_markup=keyboard)

@dp.message_handler(commands=['developer'], state="*")
async def handle_developer(message: types.Message):
    # –¢–µ–∫—Å—Ç —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
    developer_text = "–ü—Ä–∏–≤–µ—Ç! –Ø —Å–æ–∑–¥–∞–Ω –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Å—å –¢–∏–º–µ—Ä–ª–∞–Ω–æ–º. –ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, " \
                     "—Ç—ã –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –µ–º—É –≤ —Ç–µ–ª–µ–≥—Ä–∞–º: [–¢–∏–º–µ—Ä–ª–∞–Ω](https://t.me/timaadev) ü§ñ"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –µ–≥–æ –≤ —Ä–µ—á—å
    await bot.send_message(message.chat.id, developer_text, parse_mode=ParseMode.MARKDOWN)

def synthesize(api_key, text,voice,speed) -> pydub.AudioSegment: 
    request = tts_pb2.UtteranceSynthesisRequest(
        
        text=text,
        output_audio_spec=tts_pb2.AudioFormatOptions(
            container_audio=tts_pb2.ContainerAudio(
                container_audio_type=tts_pb2.ContainerAudio.WAV
            )
        ),
        unsafe_mode = True,
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏–Ω—Ç–µ–∑–∞
       hints=[
    tts_pb2.Hints(voice=voice),  # (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –ó–∞–¥–∞–π—Ç–µ –≥–æ–ª–æ—Å. –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é marina
          # (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –£–∫–∞–∂–∏—Ç–µ –∞–º–ø–ª—É–∞, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≥–æ–ª–æ—Å –∏—Ö –∏–º–µ–µ—Ç
    tts_pb2.Hints(speed=speed)          # (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –ó–∞–¥–∞–π—Ç–µ —Å–∫–æ—Ä–æ—Å—Ç—å —Å–∏–Ω—Ç–µ–∑–∞
    
],

        loudness_normalization_type=tts_pb2.UtteranceSynthesisRequest.LUFS
    )

    # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º.
    cred = grpc.ssl_channel_credentials()
    channel = grpc.secure_channel('tts.api.cloud.yandex.net:443', cred)
    stub = tts_service_pb2_grpc.SynthesizerStub(channel)

    # –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞.
    it = stub.UtteranceSynthesis(request, metadata=(

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å IAM-—Ç–æ–∫–µ–Ω–æ–º
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å API-–∫–ª—é—á–æ–º –æ—Ç –∏–º–µ–Ω–∏ —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
      ('authorization', f'Api-Key {api_key}'),
    ))

    # –°–æ–±–µ—Ä–∏—Ç–µ –∞—É–¥–∏–æ–∑–∞–ø–∏—Å—å –ø–æ –ø–æ—Ä—Ü–∏—è–º.
    try:
        audio = io.BytesIO()
        for response in it:
            audio.write(response.audio_chunk.data)
        audio.seek(0)
        return pydub.AudioSegment.from_wav(audio)
    except grpc._channel._Rendezvous as err:
        print(f'Error code {err._state.code}, message: {err._state.details}')
        raise err


async def check_sub_channels(channels, user_id):
    for channel in channels:
        chat_member = await bot.get_chat_member(chat_id=channel[1], user_id=user_id)
        if chat_member.status == 'left':
            return False
    return True


@dp.message_handler(content_types=types.ContentTypes.TEXT, state="*")
async def handle_text_message(message: types.Message, state: FSMContext):
    api_key = 'AQVN0fiGepILDWchpaGpBf81jITFo_SQY6AruXBb'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π API-–∫–ª—é—á
    text = message.text
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text='rudhdheheh üé®',url='https://t.me/rudhdheheh'))
    keyboard.add(types.InlineKeyboardButton(text='–ù–µ–º–æ–Ω—Ç–∞–∂ üé•',url='https://t.me/nmntzh'))
    user_id = message.from_user.id
    user_settings = get_user_settings(user_id)  # –§—É–Ω–∫—Ü–∏—è get_user_settings –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞
    print(user_settings)
    if await check_sub_channels(channels=CNANNELS, user_id=user_id):

        if user_settings:
            selected_voice = user_settings['selected_voice']
            selected_speed = user_settings['selected_speed']
            selected_format = user_settings['format']

            # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏
            audio = synthesize(api_key, text=text[0:599], voice=selected_voice,speed=selected_speed)

            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ –∞—É–¥–∏–æ, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω MP3
            if selected_format == 'mp3':
                with tempfile.NamedTemporaryFile(suffix=".mp3", delete=False) as temp_file:
                    audio.export(temp_file.name, format='mp3')
                    audio_data = open(temp_file.name, 'rb')
            else:
                with tempfile.NamedTemporaryFile(suffix=".wav", delete=False) as temp_file:
                    audio.export(temp_file.name, format='wav')
                    audio_data = open(temp_file.name, 'rb')

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞
            await bot.send_audio(message.chat.id, audio_data, caption=text[0:5] + '....', parse_mode=ParseMode.MARKDOWN)
        

        else:
            if user_settings == None:
                keyboard = types.ReplyKeyboardMarkup(row_width=1,resize_keyboard=True) #—Å–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                webAppTest = types.WebAppInfo(url = "https://ui-telegrab-bot.vercel.app/") #—Å–æ–∑–¥–∞–µ–º webappinfo - —Ñ–æ—Ä–º–∞—Ç —Ö—Ä–∞–Ω–µ–Ω–∏—è url
                one_butt = types.KeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏", web_app=webAppTest) #—Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Ç–∏–ø–∞ webapp
                keyboard.add(one_butt) #–¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É


                # keyboard = types.ReplyKeyboardMarkup()
                # keyboard.add("–ü–µ—Ä–µ–π—Ç–∏", web_app=WebAppInfo(url = 'https://ui-telegrab-bot.vercel.app/'))
                await bot.send_message(message.chat.id, '–í—ã –¥–æ–ª–∂–Ω—ã –≤—ã–±—Ä–∞—Ç—å –≥–æ–ª–æ—Å', reply_markup=keyboard)
    else:
        await bot.send_message(message.chat.id, text=NOT_SUB_MESSAGE,reply_markup=keyboard,parse_mode='HTML')

# async def generate_speed_keyboard():
#     keyboard = types.InlineKeyboardMarkup()
#     speeds = [str(i / 10.0) for i in range(1, 30)]  # Speeds from 0.1 to 2.9
#     for i in range(0, len(speeds), 3):
#         row = []
#         for speed in speeds[i:i+3]:
#             row.append(InlineKeyboardButton(text=speed, callback_data=f"speed_{speed}"))
#         keyboard.row(*row)
#     return keyboard


async def generate_format_keyboard():
    keyboard = types.InlineKeyboardMarkup()
    keyboard.row(InlineKeyboardButton(text="WAV üéµ", callback_data="format_wav"),
                 InlineKeyboardButton(text="MP3 üíø", callback_data="format_mp3"))
    return keyboard


@dp.callback_query_handler(lambda c: c.data.startswith('voice_'), state=VoiceSelection.Choosing)
async def process_voice_choice(callback_query: types.CallbackQuery, state: FSMContext):
    selected_voice = callback_query.data.split('_')[1]
    await VoiceSelection.FormatChoosing.set()

    # Save selected voice to state
    await state.update_data(selected_voice=selected_voice)

    # Send keyboard for format selection directly
    keyboard = await generate_format_keyboard()
    await bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∞—É–¥–∏–æ:", callback_query.message.chat.id,
                                callback_query.message.message_id, reply_markup=keyboard)


# @dp.callback_query_handler(lambda c: c.data.startswith('speed_'), state=VoiceSelection.SpeedChoosing)
# async def process_speed_choice(callback_query: types.CallbackQuery, state: FSMContext):
#     selected_speed = float(callback_query.data.split('_')[1])
#     await VoiceSelection.FormatChoosing.set()

#     # Save selected speed to state
#     await state.update_data(selected_speed=selected_speed)

#     # Send keyboard for format selection
#     keyboard = await generate_format_keyboard()  # Await the function
#     await bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∞—É–¥–∏–æ:", callback_query.message.chat.id,
#                                 callback_query.message.message_id, reply_markup=keyboard)



@dp.callback_query_handler(lambda c: c.data.startswith('format_'), state=VoiceSelection.FormatChoosing)
async def process_format_choice(callback_query: types.CallbackQuery, state: FSMContext):
    selected_format = callback_query.data.split('_')[1]
    data = await state.get_data()
    selected_voice = data.get('selected_voice')
    selected_speed = data.get('selected_speed')

    # Use selected voice, speed, and format for speech synthesis
    api_key = 'AQVN0fiGepILDWchpaGpBf81jITFo_SQY6AruXBb'  # Replace with your API key
    text = data.get('text', '')
    audio = synthesize(api_key, text[0:249], voice=selected_voice)

    # Convert audio format if MP3 is selected
    if selected_format == 'mp3':
        with tempfile.NamedTemporaryFile(suffix=".mp3", delete=False) as temp_file:
            audio.export(temp_file.name, format='mp3')
            audio_data = open(temp_file.name, 'rb')
    else:
        with tempfile.NamedTemporaryFile(suffix=".wav", delete=False) as temp_file:
            audio.export(temp_file.name, format='wav')
            audio_data = open(temp_file.name, 'rb')

    # Send the audio file
    await bot.send_audio(callback_query.from_user.id, audio_data, caption=text[0:259] + '....',
                        parse_mode=ParseMode.MARKDOWN)

    # Finish the state
    await state.finish()

    # Answer the callback query
    await bot.answer_callback_query(callback_query.id, text=f"–ì–æ–ª–æ—Å: {selected_voice}, –°–∫–æ—Ä–æ—Å—Ç—å: {selected_speed}, –§–æ—Ä–º–∞—Ç: {selected_format}")


if __name__ == '__main__':
    from aiogram import executor
    loop = asyncio.get_event_loop()
    loop.create_task(bot.send_message(5455171373, '–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω'))  # –ó–∞–º–µ–Ω–∏—Ç–µ 123456789 –Ω–∞ –≤–∞—à ID —á–∞—Ç–∞
    executor.start_polling(dp, skip_updates=True)
