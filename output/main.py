import io
import aiohttp
import grpc
import pydub
import argparse
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.types import ParseMode
from aiogram.contrib.middlewares.logging import LoggingMiddleware
import asyncio
from aiogram.types import Chat
from config import *
import yandex.cloud.ai.tts.v3.tts_pb2 as tts_pb2
import yandex.cloud.ai.tts.v3.tts_service_pb2_grpc as tts_service_pb2_grpc
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types.web_app_info import WebAppInfo
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
import tempfile
from base import *
from aiogram.utils.exceptions import ChatNotFound
import datetime
from state import *
from apscheduler.schedulers.background import BackgroundScheduler



API_TOKEN = TOKEN

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

dp.middleware.setup(LoggingMiddleware())

state_bot = True

scheduler = BackgroundScheduler()
scheduler.start()


users_per_page = 3  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
create_db()
create_users_table()
create_ref_table()
create_bonus_day()
insert_bonus()
create_bonus_ref()
insert_ref_bonus()
activity_today()


users = get_all_users()

voice_descriptions = {
    'alena': '–ê–ª—ë–Ω–∞ üíÖ',
    'filipp': '–§–∏–ª–∏–ø–ø üë§',
    'ermil': '–ï—Ä–º–∏–ª üë§',
    'jane': '–î–∂–µ–π–Ω üíÖ',
    'madirus': '–ú–∞–¥–∏—Ä–∞—Å üë§',
    'omazh': '–û–º–∞–∂ üë§',
    'zahar': '–ó–∞—Ö–∞—Ä üë§',
    'dasha': '–î–∞—à–∞ üíÖ',
    'julia': '–Æ–ª–∏—è üíÖ',
    'lera': '–õ–µ—Ä–∞ üíÖ',
    'masha': '–ú–∞—à–∞ üíÖ',
    'marina': '–ú–∞—Ä–∏–Ω–∞ üíÖ',
    'alexander': '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä üë§',
    'kirill': '–ö–∏—Ä–∏–ª–ª üë§',
    'anton': '–ê–Ω—Ç–æ–Ω üë§'
}

def generate_voice_keyboard():
    keyboard = types.InlineKeyboardMarkup()
    voices = list(voice_descriptions.keys())  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π —Å–ª–æ–≤–∞—Ä—è
    for i in range(0, len(voices), 3):
        row = []
        for voice in voices[i:i+3]:
            description = voice_descriptions.get(voice, voice)  # –ï—Å–ª–∏ –æ–ø–∏—Å–∞–Ω–∏—è –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∞–º –≥–æ–ª–æ—Å
            row.append(types.InlineKeyboardButton(text=description, callback_data=f"voice_{voice}"))
        keyboard.row(*row)
    return keyboard



@dp.message_handler(commands=['start'], state="*")
async def handle_start(message: types.Message):
    if message.chat.type == "private":
        referal_id = None
        if len(message.text.split()) > 1:
            res = message.text.split()
            res = res[-1]
            res = res.replace('ref','')
            referal_id = res
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(text='–ü—Ä–∞–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ ü´Ç', callback_data='ref_link'))
        # –¢–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —ç–º–æ–¥–∑–∏
        welcome_text = "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –≤ —Ä–µ—á—å. " \
                    "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç, –∏ —è —Å–æ–∑–¥–∞–º –¥–ª—è —Ç–µ–±—è –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! üé§"
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –µ–≥–æ –≤ —Ä–µ—á—å
        if referal_id:
            save_referral_invited(referal_id, message.from_user.id)
            if message.from_user.username == None:
                add_user(message.from_user.id, message.from_user.first_name ,datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"),2500,10,'OFF','join','user')
            else:
                add_user(message.from_user.id, message.from_user.username ,datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"),2500,10,'OFF','join','user')
            await bot.send_message(message.chat.id, welcome_text,reply_markup=keyboard)
        else:
            
            save_referral(message.from_user.id)
            if message.from_user.username == None:
                add_user(message.from_user.id, message.from_user.first_name ,datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"),2500,10,'OFF','join','user')
            else:
                add_user(message.from_user.id, message.from_user.username ,datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"),2500,10,'OFF','join','user')
            await bot.send_message(message.chat.id, welcome_text,reply_markup=keyboard)
    else:
        await bot.send_message(message.chat.id,'–±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö')
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–∏—Å–∫ –ø–æ –ª–æ–≥–∏–Ω—É"
@dp.callback_query_handler(lambda call: call.data == "ref_link", state="*")
async def handle_ref_link(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)
    invited_users = get_invited_users(user_id=callback_query.message.chat.id )
    get_req = get_request_mon_for_user(user_id=callback_query.message.chat.id )
    count = get_bonus_ref()
    await bot.send_message(chat_id=callback_query.message.chat.id,text=REF_TEXT.format(count = count,users=invited_users,count2=get_req,url = f'https://t.me/fdfdfdsndslkv_bot?start=ref{callback_query.message.chat.id}'))
    

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ª–æ–≥–∏–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message_handler(state=SearchUserState.InputUsername, content_types=types.ContentTypes.TEXT)
async def handle_ref_link(message: types.Message, state: FSMContext):
    username = message.text
    users = get_all_users()

    found_users = [(user_id, user_name) for user_id, user_name in users if username.lower() in user_name.lower()]

    if found_users:
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        for user_id, user_name in found_users:
            keyboard.add(types.InlineKeyboardButton(text=user_name, callback_data=f'select_user_{user_id}_{user_name}'))
        
        await message.reply("–ù–∞–π–¥–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:", reply_markup=keyboard)
    else:
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é',callback_data='search_user'))
        await message.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",reply_markup=keyboard)

    await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–∏—Å–∫–∞




@dp.message_handler(commands=['admin'])
async def handle_admin(message: types.Message, state="*"):
    await state.finish()
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    admin = get_admin_user(message.chat.id)
    print(message.chat.id not in admin_ids)
    
    if message.chat.id not in admin_ids and not admin  == 'admin':
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    keyboard = types.InlineKeyboardMarkup(row_width=1, resize_keyboard=True)
    keyboard.add(types.InlineKeyboardButton(text="–°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ ü§ñ",callback_data='status'), types.InlineKeyboardButton(text="–†–∞—Å—Å—ã–ª–∫–∞ üìù",callback_data='newsletter'),
                 types.InlineKeyboardButton(text="–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ üìä",callback_data='analytics'))

    await bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)


@dp.callback_query_handler(lambda call: call.data == "analytics", state="*")
async def handle_bot_analitycs(callback_query: types.CallbackQuery):
    global state_bot
    chat_id = callback_query.from_user.id
    message_id = callback_query.message.message_id
    keyboard = types.InlineKeyboardMarkup(row_width=1, resize_keyboard=True)
    keyboard.add(types.InlineKeyboardButton(text="–ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üîé",callback_data='search_user'))
    keyboard.add(types.InlineKeyboardButton(text='–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å ',callback_data='bonus_day'))
    keyboard.add(types.InlineKeyboardButton(text='–†–µ—Ñ –±–æ–Ω—É—Å',callback_data='ref_bonus'))
    keyboard.add(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚è™",callback_data='back_menu'))
    text = '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä'
    count = count_total_users()
    this_month = count_new_users_this_month()
    last_month = count_new_users_last_month()
    today_activity = count_active_users_today()
    text += f'\n\nüî¢ –û–±—â–µ–µ'
    text += f'\n‚îî –ö–æ–ª-–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π = {count}'
    text += f'\n‚îî –ö–æ–ª-–≤–æ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü = {this_month}'
    text += f'\n‚îî –ö–æ–ª-–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –ø—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü = {last_month}'
    text += f'\n‚îî –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞ = {count_blocked_users()}'
    text += f'\n‚îî –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–µ–≥–æ–¥–Ω—è = {today_activity}'
    text += f'\n‚îî –ö–æ–ª-–≤–æ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ = {len(admin_ids)}'
    text += f'\n‚îî –ö–æ–ª-–≤–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ = {get_all_admin_from_bd()}'
    
    await bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=text, reply_markup=keyboard)



@dp.callback_query_handler(lambda call: call.data == "ref_bonus", state="*")
async def handle_ref_bonus(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª-–≤–æ –±–æ–Ω—É—Å–æ–≤ –∑–∞ —Ä–µ—Ñ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ')
    await BonusRefState.ref.set()



@dp.message_handler(state=BonusRefState.ref)
async def bon_state_ref(message: types.Message, state: FSMContext):
    try:
        new_bonus_count = int(message.text)
        if new_bonus_count < 0:
            await message.reply("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–Ω—É—Å–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º.")
            return
        update_bonus_ref(new_bonus_count)
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='analytics'))
        await message.reply(f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–Ω—É—Å–æ–≤ –∑–∞ —Ä–µ—Ñ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {new_bonus_count}', reply_markup=keyboard)
        await state.finish()  # –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")


@dp.callback_query_handler(lambda call: call.data == "bonus_day", state="*")
async def handle_day_bonus(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª-–≤–æ –±–æ–Ω—É—Å–æ–≤ –∑–∞ –¥–µ–Ω—å')
    await BonusDayState.bonus.set()

@dp.message_handler(state=BonusDayState.bonus)
async def bon_state(message: types.Message, state: FSMContext):
    try:
        new_bonus_count = int(message.text)
        if new_bonus_count < 0:
            await message.reply("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–Ω—É—Å–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º.")
            return
        update_bonus(new_bonus_count)
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='analytics'))
        await message.reply(f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–Ω—É—Å–æ–≤ –∑–∞ –¥–µ–Ω—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {new_bonus_count}', reply_markup=keyboard)
        await state.finish()  # –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
@dp.callback_query_handler(lambda call: call.data == "search_user", state="*")
async def handle_bot_search_user(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)

    users = get_all_users()
    global users_per_page  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    current_page = 0

    async def send_users_page(chat_id, message_id, page):
        start_index = page * users_per_page
        end_index = min((page + 1) * users_per_page, len(users))
        user_names = users[start_index:end_index]

        keyboard = types.InlineKeyboardMarkup(row_width=1)
        for i in range(0, len(user_names)):
            user_id, user_name = user_names[i]  # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º tuple
            keyboard.add(types.InlineKeyboardButton(text=user_name, callback_data=f'select_user_{user_id}_{user_name}'))

        if page > 0:
            keyboard.row(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚è™", callback_data='back'))
        if end_index < len(users):
            keyboard.row(types.InlineKeyboardButton(text="–î–∞–ª—å—à–µ ‚è©", callback_data='next'))

        keyboard.row(
            types.InlineKeyboardButton(text="–ü–æ–∏—Å–∫ –ø–æ –ª–æ–≥–∏–Ω—É üîç", callback_data='search_by_username'),
            types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data='analytics')
        )

        await bot.edit_message_text(chat_id=chat_id, message_id=message_id, text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=keyboard)

    await send_users_page(callback_query.message.chat.id, callback_query.message.message_id, current_page)




# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–∏—Å–∫ –ø–æ –ª–æ–≥–∏–Ω—É"
@dp.callback_query_handler(lambda call: call.data == "search_by_username", state="*")
async def handle_search_by_username(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞ –∏ –Ω–∞–∑–∞–¥ –≤ –º–µ–Ω—é',callback_data='search_user'))
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",reply_markup=keyboard)
    await SearchUserState.InputUsername.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ª–æ–≥–∏–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message_handler(state=SearchUserState.InputUsername, content_types=types.ContentTypes.TEXT)
async def handle_username_input(message: types.Message, state: FSMContext):
    username = message.text
    users = get_all_users()

    found_users = [(user_id, user_name) for user_id, user_name in users if username.lower() in user_name.lower()]

    if found_users:
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        for user_id, user_name in found_users:
            keyboard.add(types.InlineKeyboardButton(text=user_name, callback_data=f'select_user_{user_id}_{user_name}'))
        
        await message.reply("–ù–∞–π–¥–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:", reply_markup=keyboard)
    else:
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é',callback_data='search_user'))
        await message.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",reply_markup=keyboard)

    await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–∏—Å–∫–∞


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–î–∞–ª—å—à–µ" –∏–ª–∏ "–ù–∞–∑–∞–¥"
@dp.callback_query_handler(lambda call: call.data in ['next', 'back'], state="*")
async def handle_pagination(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)

    users = get_all_users()
    global users_per_page # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    current_page = await state.get_state() or 0

    current_page = int(current_page)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ

    if callback_query.data == 'next':
        current_page += 1
    elif callback_query.data == 'back':
        current_page -= 1

    await state.set_state(current_page)

    await send_users_page(callback_query.message.chat.id, callback_query.message.message_id, current_page)



async def send_users_page(chat_id, message_id, page):
    global users_per_page
    start_index = page * users_per_page
    end_index = min((page + 1) * users_per_page, len(users))
    user_names = users[start_index:end_index]

    keyboard = types.InlineKeyboardMarkup(row_width=1)
    for i in range(0, len(user_names)):
        user_id, user_name = user_names[i]  # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º tuple
        user_name = str(user_name)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        keyboard.add(types.InlineKeyboardButton(text=user_name, callback_data=f'select_user_{user_id}_{user_name}'))

    if page > 0:
        keyboard.row(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚è™", callback_data='back'))
    if end_index < len(users):
        keyboard.row(types.InlineKeyboardButton(text="–î–∞–ª—å—à–µ ‚è©", callback_data='next'))

    keyboard.row(
        types.InlineKeyboardButton(text="–ü–æ–∏—Å–∫ –ø–æ –ª–æ–≥–∏–Ω—É üîç", callback_data='search_by_username'),
        types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data='analytics')
    )

    await bot.edit_message_text(chat_id=chat_id, message_id=message_id, text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=keyboard)




# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.callback_query_handler(lambda call: call.data.startswith('select_user_'), state="*")
async def handle_select_user(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)
    
    user_name = callback_query.data.split('_')[-1]
    user_id = callback_query.data.split('_')[-2]
    chat_id = callback_query.from_user.id
    message_id = callback_query.message.message_id
    count_symbols = get_symbols(user_id)
    request_month = get_request_month(user_id=user_id)
    unlimited = get_unlimited_person(user_id)
    role = get_role_user(user_id)
    status = get_status_user(user_id)
    keyboard = types.InlineKeyboardMarkup()
    unl_btn = ''
    role_btn = ''
    status_btn = ''
    text = f'ID: <b>{user_id}</b>'
    text += f'\n–õ–æ–≥–∏–Ω: <b> @{user_name}</b>'
    text += f'\n–ö–æ–ª-–≤–æ —Å–∏–º–≤–æ–ª–æ–≤: <b>{count_symbols[0]}</b>'
    text += f'\n–ö–æ–ª-–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–µ—Å—è—Ü: <b>{request_month[0]}</b>'

   
    if unlimited[0] == 'ON':
        text+= '\n–ë–µ–∑–ª–∏–º–∏—Ç: <b>–≤–∫–ª—é—á–µ–Ω</b>'
        unl_btn = types.InlineKeyboardButton(text='–û—Ç–∫–ª—é—á–∏—Ç—å –±–µ–∑–ª–∏–º–∏—Ç',callback_data = f'off_unlimited_{user_id}_{user_name}')
    else:
        text+= '\n–ë–µ–∑–ª–∏–º–∏—Ç: <b>–æ—Ç–∫–ª—é—á–µ–Ω</b>'
        unl_btn = types.InlineKeyboardButton(text='–í–∫–ª—é—á–∏—Ç—å –±–µ–∑–ª–∏–º–∏—Ç',callback_data = f'on_unlimited_{user_id}_{user_name}')

    if role[0] == 'user':
        text += f'\n\n–†–æ–ª—å: <b>–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</b>'
        role_btn = types.InlineKeyboardButton(text=f'–ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º',callback_data=f'appoint_admin_{user_id}_{user_name}')
    else:
        text += f'\n\n–†–æ–ª—å: <b>–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</b>'
        role_btn = types.InlineKeyboardButton(text=f'–ù–∞–∑–Ω–∞—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º',callback_data=f'appoint_user_{user_id}_{user_name}')


    if status[0] == 'join':
        status_btn = types.InlineKeyboardButton(text=f'–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å',callback_data=f'block_user_{user_id}_{user_name}')
    else:
        status_btn = types.InlineKeyboardButton(text=f'–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å',callback_data=f'unblock_user_{user_id}_{user_name}')


    keyboard.add(role_btn)
    keyboard.add(status_btn)
    keyboard.add(types.InlineKeyboardButton(text=f'–û–±–Ω–æ–≤–∏—Ç—å –∫–æ–ª-–≤–æ —Å–∏–º–æ–≤–æ–ª–æ–≤',callback_data=f'upsymbols_{user_id}_{user_name}'))
    keyboard.add(types.InlineKeyboardButton(text=f'–û–±–Ω–æ–≤–∏—Ç—å –∫–æ–ª-–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å',callback_data=f'upmonth_{user_id}_{user_name}'))
    keyboard.add(unl_btn)
    keyboard.add(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚è™", callback_data='search_user'))
    await bot.edit_message_text(chat_id=callback_query.message.chat.id, message_id=message_id, text=text,reply_markup=keyboard,parse_mode='html')


#–ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    
@dp.callback_query_handler(lambda call: call.data.startswith('appoint_admin_'), state="*")
async def handle_appoint_admin(callback_query: types.CallbackQuery, state: FSMContext):
    user_name = callback_query.data.split('_')[-1]
    user_id = callback_query.data.split('_')[-2]
    chat_id = callback_query.from_user.id
    message_id = callback_query.message.message_id
    update_role_user_admin(user_id)
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚è™", callback_data=f'select_user_{user_id}_{user_name}'))
    await bot.edit_message_text(chat_id=callback_query.message.chat.id, message_id=message_id, text='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º',reply_markup=keyboard,parse_mode='html')
    await bot.answer_callback_query(callback_query_id=callback_query.id) 


#–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

@dp.callback_query_handler(lambda call: call.data.startswith('appoint_user_'), state="*")
async def handle_appoint_user(callback_query: types.CallbackQuery, state: FSMContext):
    user_name = callback_query.data.split('_')[-1]
    user_id = callback_query.data.split('_')[-2]
    chat_id = callback_query.from_user.id
    message_id = callback_query.message.message_id
    update_role_user_person(user_id)
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚è™", callback_data=f'select_user_{user_id}_{user_name}'))
    await bot.edit_message_text(chat_id=callback_query.message.chat.id, message_id=message_id, text='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤',reply_markup=keyboard,parse_mode='html')
    await bot.answer_callback_query(callback_query_id=callback_query.id) 



#–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.callback_query_handler(lambda call: call.data.startswith('block_user_'), state="*")
async def handle_block_user(callback_query: types.CallbackQuery, state: FSMContext):
    user_name = callback_query.data.split('_')[-1]
    user_id = callback_query.data.split('_')[-2]
    chat_id = callback_query.from_user.id
    message_id = callback_query.message.message_id
    
    update_status_kick(user_id)
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚è™", callback_data=f'select_user_{user_id}_{user_name}'))
    await bot.edit_message_text(chat_id=callback_query.message.chat.id, message_id=message_id, text='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω',reply_markup=keyboard,parse_mode='html')
    await bot.answer_callback_query(callback_query_id=callback_query.id) 



#–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

@dp.callback_query_handler(lambda call: call.data.startswith('unblock_user_'), state="*")
async def handle_unblock_user(callback_query: types.CallbackQuery, state: FSMContext):
    user_name = callback_query.data.split('_')[-1]
    user_id = callback_query.data.split('_')[-2]
    chat_id = callback_query.from_user.id
    message_id = callback_query.message.message_id
    update_status_join(user_id)
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚è™", callback_data=f'select_user_{user_id}_{user_name}'))
    await bot.edit_message_text(chat_id=callback_query.message.chat.id, message_id=message_id, text='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω',reply_markup=keyboard,parse_mode='html')
    await bot.answer_callback_query(callback_query_id=callback_query.id) 


#–í–∫–ª—é—á–∏—Ç—å –±–µ–∑–ª–º–∏—Ç

    
@dp.callback_query_handler(lambda call: call.data.startswith('off_unlimited_'), state="*")
async def handle_off_unlimited(callback_query: types.CallbackQuery, state: FSMContext):
    user_name = callback_query.data.split('_')[-1]
    user_id = callback_query.data.split('_')[-2]
    chat_id = callback_query.from_user.id
    message_id = callback_query.message.message_id
    update_unlimited_off(user_id)
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚è™", callback_data=f'select_user_{user_id}_{user_name}'))
    await bot.edit_message_text(chat_id=callback_query.message.chat.id, message_id=message_id, text='–ë–µ–∑–ª–º–∏—Ç –æ—Ç–∫–ª—é—á–µ–Ω',reply_markup=keyboard,parse_mode='html')
    await bot.answer_callback_query(callback_query_id=callback_query.id) 

#–í—ã–∫–ª—é—á–∏—Ç—å –±–µ–∑–ª–º–∏—Ç


@dp.callback_query_handler(lambda call: call.data.startswith('on_unlimited_'), state="*")
async def handle_off_unlimited(callback_query: types.CallbackQuery, state: FSMContext):
    user_name = callback_query.data.split('_')[-1]
    user_id = callback_query.data.split('_')[-2]
    chat_id = callback_query.from_user.id
    message_id = callback_query.message.message_id
    update_unlimited_on(user_id)
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚è™", callback_data=f'select_user_{user_id}_{user_name}'))
    await bot.edit_message_text(chat_id=callback_query.message.chat.id, message_id=message_id, text='–ë–µ–∑–ª–º–∏—Ç –≤–∫–ª—é—á–µ–Ω',reply_markup=keyboard,parse_mode='html')
    await bot.answer_callback_query(callback_query_id=callback_query.id) 





# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª-–≤–æ —Å–∏–º–≤–æ–ª–æ–≤
    
@dp.callback_query_handler(lambda call: call.data.startswith('upsymbols_'), state="*")
async def handle_update(callback_query: types.CallbackQuery, state: FSMContext):
    user_name = callback_query.data.split('_')[-1]
    user_id = callback_query.data.split('_')[1]
    chat_id = callback_query.from_user.id
    message_id = callback_query.message.message_id
    
    await bot.send_message(chat_id=callback_query.message.chat.id,text=f'–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è {user_name}')
    await bot.answer_callback_query(callback_query_id=callback_query.id) 
    await state.update_data(user_id=user_id,user_name = user_name)
    await UpdateSymbols.symbols.set()


@dp.message_handler(state=UpdateSymbols.symbols)
async def update_symbols(message: types.Message, state: FSMContext):
    new_symbols = message.text
    # –û—Ç–º–µ—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é

    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è —Å–∏–º–≤–æ–ª–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    # –ù–∞–ø—Ä–∏–º–µ—Ä:
    data = await state.get_data()
    user_id = data.get('user_id')
    user_name = data.get('user_name')
    update_user_symbols(user_id, new_symbols)
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚è™", callback_data=f'select_user_{user_id}_{user_name}'))
    await bot.send_message(message.chat.id,text=f'–ó–Ω–∞—á–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {new_symbols}',reply_markup=keyboard)
    await state.finish()



#–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª-–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤
    
@dp.callback_query_handler(lambda call: call.data.startswith('upmonth_'), state="*")
async def handle_update(callback_query: types.CallbackQuery, state: FSMContext):
    user_name = callback_query.data.split('_')[-1]
    user_id = callback_query.data.split('_')[1]
    chat_id = callback_query.from_user.id
    message_id = callback_query.message.message_id
    
    await bot.send_message(chat_id=callback_query.message.chat.id,text=f'–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª-–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–µ—Å—è—Ü –¥–ª—è  {user_name}')
    await bot.answer_callback_query(callback_query_id=callback_query.id) 
    await state.update_data(user_id=user_id,user_name = user_name)
    await UpdateMonth.month.set()


@dp.message_handler(state=UpdateMonth.month)
async def update_month(message: types.Message, state: FSMContext):
    new_request_month = message.text
    # –û—Ç–º–µ—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é

    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è —Å–∏–º–≤–æ–ª–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    # –ù–∞–ø—Ä–∏–º–µ—Ä:
    data = await state.get_data()
    user_id = data.get('user_id')
    user_name = data.get('user_name')
    update_user_request_month(user_id, new_request_month)
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚è™", callback_data=f'select_user_{user_id}_{user_name}'))
    await bot.send_message(message.chat.id,text=f"–ö–æ–ª-–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–æ  = {new_request_month}",reply_markup=keyboard)
    await state.finish()





@dp.callback_query_handler(lambda call: call.data == "newsletter", state="*")
async def handle_bot_newsletter(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query_id=callback_query.id)  # –û—Ç–º–µ—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é
    await NewsletterText.text.set()
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é',callback_data='back_menu'))
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:",reply_markup=keyboard)


#–û—Ç–º–µ–Ω–∞
    





@dp.message_handler(content_types=[types.ContentType.TEXT,types.ContentType.PHOTO], state=NewsletterText.text)
async def process_mixed_content(message: types.Message, state: FSMContext):
    # Initialize variables to store text and photo
    text = ""
    photo = None
    # Check if the message contains both text and photo
    if message.caption:
        text = message.caption
    if message.text:
        text = message.text
    if message.photo:
        photo = message.photo[-1].file_id

    # Get all user IDs from the database
    all_user_ids = get_all_user_ids()

    # Send the mixed content to each user individually
    for user_id in all_user_ids:
        try:
            if text and photo:
                # If both text and photo are present, send them together
                await bot.send_photo(user_id[0], photo, caption=text)
            elif text:
                # If only text is present, send the text
                await bot.send_message(user_id[0], text)
            elif photo:
                # If only photo is present, send the photo
                await bot.send_photo(user_id[0], photo)
        except Exception as e:
            print(f"Failed to send mixed content newsletter to user {user_id}: {e}")

    await state.finish()
    await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
    keyboard = types.InlineKeyboardMarkup(row_width=1, resize_keyboard=True)
    keyboard.add(types.InlineKeyboardButton(text="–°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ ü§ñ",callback_data='status'), types.InlineKeyboardButton(text="–†–∞—Å—Å—ã–ª–∫–∞ üìù",callback_data='newsletter'),
                 types.InlineKeyboardButton(text="–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ üìä",callback_data='analytics'))

    await bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
    

@dp.callback_query_handler(lambda call: call.data == "back_menu", state="*")
async def handle_bot_back(callback_query: types.CallbackQuery):
    global state_bot
    chat_id = callback_query.from_user.id
    message_id = callback_query.message.message_id
    keyboard = types.InlineKeyboardMarkup(row_width=1, resize_keyboard=True)
    keyboard.add(types.InlineKeyboardButton(text="–°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ ü§ñ",callback_data='status'), types.InlineKeyboardButton(text="–†–∞—Å—Å—ã–ª–∫–∞ üìù",callback_data='newsletter'),
                 types.InlineKeyboardButton(text="–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ üìä",callback_data='analytics'))
  
    await bot.edit_message_text(chat_id=chat_id, message_id=message_id, text="–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é", reply_markup=keyboard)



@dp.callback_query_handler(lambda call: call.data == "status", state="*")
async def handle_bot_state(callback_query: types.CallbackQuery):
    global state_bot
    chat_id = callback_query.from_user.id
    message_id = callback_query.message.message_id
    
    if state_bot:
        keyboard = types.InlineKeyboardMarkup()
        
        keyboard.add(types.InlineKeyboardButton(text="–í—ã–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞ üî¥", callback_data='toggle_off'))
        keyboard.add(types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥',callback_data='back_menu'))
        await bot.edit_message_text(chat_id=chat_id, message_id=message_id, text="–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –≤–∫–ª—é—á–µ–Ω üü¢" , reply_markup=keyboard)
    else:
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(text="–í–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞ üü¢", callback_data='toggle_on'))
        keyboard.add(types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥',callback_data='back_menu'))

        await bot.edit_message_text(chat_id=chat_id, message_id=message_id, text="–ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω üî¥", reply_markup=keyboard)

@dp.callback_query_handler(lambda call: call.data.startswith("toggle_"), state="*")
async def toggle_bot(callback_query: types.CallbackQuery):
    global state_bot
    message = callback_query.message
    chat_id = message.chat.id
    message_id = message.message_id
    
    if callback_query.data == "toggle_on":
        state_bot = True
        await handle_bot_state(callback_query)
    elif callback_query.data == "toggle_off":
        state_bot = False
        await handle_bot_state(callback_query)




@dp.message_handler(commands=['set_voice'], state="*")
async def handle_setVoice(message: types.Message):
    user_id = message.from_user.id
    status = get_status_user(user_id)
    if status[0]=='join':
        keyboard = types.ReplyKeyboardMarkup(row_width=1,resize_keyboard=True) #—Å–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        webAppTest = types.WebAppInfo(url=f"https://ui-telegrab-bot.vercel.app/?user_id={user_id}")
        one_butt = types.KeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏", web_app=webAppTest) #—Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Ç–∏–ø–∞ webapp
        keyboard.add(one_butt) #–¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await bot.send_message(message.chat.id, '–í—ã –¥–æ–ª–∂–Ω—ã –≤—ã–±—Ä–∞—Ç—å –≥–æ–ª–æ—Å', reply_markup=keyboard)
    else:
        await bot.send_message(message.chat.id, '–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ')     

@dp.message_handler(commands=['developer'], state="*")
async def handle_developer(message: types.Message):
    # –¢–µ–∫—Å—Ç —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
    developer_text = "–ü—Ä–∏–≤–µ—Ç! –Ø —Å–æ–∑–¥–∞–Ω –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Å—å –¢–∏–º–µ—Ä–ª–∞–Ω–æ–º. –ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, " \
                     "—Ç—ã –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –µ–º—É –≤ —Ç–µ–ª–µ–≥—Ä–∞–º: [–¢–∏–º–µ—Ä–ª–∞–Ω](https://t.me/timaadev) ü§ñ"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –µ–≥–æ –≤ —Ä–µ—á—å
    await bot.send_message(message.chat.id, developer_text, parse_mode=ParseMode.MARKDOWN)

def synthesize(api_key, text,voice,speed) -> pydub.AudioSegment: 
    request = tts_pb2.UtteranceSynthesisRequest(
        
        text=text,
        output_audio_spec=tts_pb2.AudioFormatOptions(
            container_audio=tts_pb2.ContainerAudio(
                container_audio_type=tts_pb2.ContainerAudio.WAV
            )
        ),
        unsafe_mode = True,
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏–Ω—Ç–µ–∑–∞
       hints=[
    tts_pb2.Hints(voice=voice),  # (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –ó–∞–¥–∞–π—Ç–µ –≥–æ–ª–æ—Å. –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é marina
          # (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –£–∫–∞–∂–∏—Ç–µ –∞–º–ø–ª—É–∞, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≥–æ–ª–æ—Å –∏—Ö –∏–º–µ–µ—Ç
    tts_pb2.Hints(speed=speed)          # (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –ó–∞–¥–∞–π—Ç–µ —Å–∫–æ—Ä–æ—Å—Ç—å —Å–∏–Ω—Ç–µ–∑–∞
    
],

        loudness_normalization_type=tts_pb2.UtteranceSynthesisRequest.LUFS
    )

    # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º.
    cred = grpc.ssl_channel_credentials()
    channel = grpc.secure_channel('tts.api.cloud.yandex.net:443', cred)
    stub = tts_service_pb2_grpc.SynthesizerStub(channel)

    # –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞.
    it = stub.UtteranceSynthesis(request, metadata=(

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å IAM-—Ç–æ–∫–µ–Ω–æ–º
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å API-–∫–ª—é—á–æ–º –æ—Ç –∏–º–µ–Ω–∏ —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
      ('authorization', f'Api-Key {api_key}'),
    ))

    # –°–æ–±–µ—Ä–∏—Ç–µ –∞—É–¥–∏–æ–∑–∞–ø–∏—Å—å –ø–æ –ø–æ—Ä—Ü–∏—è–º.
    try:
        audio = io.BytesIO()
        for response in it:
            audio.write(response.audio_chunk.data)
        audio.seek(0)
        return pydub.AudioSegment.from_wav(audio)
    except grpc._channel._Rendezvous as err:
        print(f'Error code {err._state.code}, message: {err._state.details}')
        raise err


async def check_sub_channels(channels, user_id):
    for channel in channels:
        chat_member = await bot.get_chat_member(chat_id=channel[1], user_id=user_id)
        if chat_member.status == 'left':
            return False
    return True


@dp.message_handler(content_types=types.ContentTypes.TEXT, state="*")
async def handle_text_message(message: types.Message, state: FSMContext):
    keyboard = None  # Initialize keyboard with a default value

    if state_bot:
        api_key = 'AQVN0fiGepILDWchpaGpBf81jITFo_SQY6AruXBb'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π API-–∫–ª—é—á
        text = message.text
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(text='–ù–µ–¥–∏–∑–∞–π–Ω üé®',url='https://t.me/ndsgne'))
        keyboard.add(types.InlineKeyboardButton(text='–ù–µ–º–æ–Ω—Ç–∞–∂ üé•',url='https://t.me/nmntzh'))
        user_id = message.from_user.id
        user_settings = get_user_settings(user_id)  # –§—É–Ω–∫—Ü–∏—è get_user_settings –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞
        count_symbols_user = get_symbols(user_id)
        request_month = get_request_month(user_id)
        unlimited = get_unlimited_person(user_id)
        insert_or_update_user(user_id)
        join = get_status_user(user_id)
        if join[0] == 'join':
                if unlimited[0]=='ON':
                    if user_settings:
                        selected_voice = user_settings['selected_voice']
                        selected_speed = user_settings['selected_speed']
                        selected_format = user_settings['format']

                        # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏
                        audio = synthesize(api_key, text=text, voice=selected_voice,speed=selected_speed)

                        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ –∞—É–¥–∏–æ, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω MP3
                        if selected_format == 'mp3':
                            with tempfile.NamedTemporaryFile(suffix=".mp3", delete=False) as temp_file:
                                audio.export(temp_file.name, format='mp3')
                                audio_data = open(temp_file.name, 'rb')
                        else:
                            with tempfile.NamedTemporaryFile(suffix=".wav", delete=False) as temp_file:
                                audio.export(temp_file.name, format='wav')
                                audio_data = open(temp_file.name, 'rb')

                        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞
                        await bot.send_audio(message.chat.id, audio_data, caption=text[0:5] + '....', parse_mode=ParseMode.MARKDOWN)
                

                    else:
                        if user_settings == None:
                            keyboard = types.ReplyKeyboardMarkup(row_width=1,resize_keyboard=True) #—Å–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                            webAppTest = types.WebAppInfo(url=f"https://ui-telegrab-bot.vercel.app/?user_id={user_id}")
                            one_butt = types.KeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏", web_app=webAppTest) #—Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Ç–∏–ø–∞ webapp
                            keyboard.add(one_butt) #–¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É


                            # keyboard = types.ReplyKeyboardMarkup()
                            # keyboard.add("–ü–µ—Ä–µ–π—Ç–∏", web_app=WebAppInfo(url = 'https://ui-telegrab-bot.vercel.app/'))
                            await bot.send_message(message.chat.id, '–í—ã –¥–æ–ª–∂–Ω—ã –≤—ã–±—Ä–∞—Ç—å –≥–æ–ª–æ—Å', reply_markup=keyboard)

                elif request_month[0]>0:

                    if user_settings:
                        try:
                            selected_voice = user_settings['selected_voice']
                            selected_speed = user_settings['selected_speed']
                            selected_format = user_settings['format']

                            # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏
                            audio = synthesize(api_key, text=text[0:count_symbols_user[0]], voice=selected_voice,speed=selected_speed)

                            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ –∞—É–¥–∏–æ, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω MP3
                            if selected_format == 'mp3':
                                with tempfile.NamedTemporaryFile(suffix=".mp3", delete=False) as temp_file:
                                    audio.export(temp_file.name, format='mp3')
                                    audio_data = open(temp_file.name, 'rb')
                            else:
                                with tempfile.NamedTemporaryFile(suffix=".wav", delete=False) as temp_file:
                                    audio.export(temp_file.name, format='wav')
                                    audio_data = open(temp_file.name, 'rb')

                            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞
                            await bot.send_audio(message.chat.id, audio_data, caption=text[0:5] + '....', parse_mode=ParseMode.MARKDOWN)
                            minus_one(user_id) #–û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü–µ
                        except:
                            pass

                    else:
                        if user_settings == None:
                            keyboard = types.ReplyKeyboardMarkup(row_width=1,resize_keyboard=True) #—Å–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                            webAppTest = types.WebAppInfo(url=f"https://ui-telegrab-bot.vercel.app/?user_id={user_id}")
                            one_butt = types.KeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏", web_app=webAppTest) #—Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Ç–∏–ø–∞ webapp
                            keyboard.add(one_butt) #–¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É


                            # keyboard = types.ReplyKeyboardMarkup()
                            # keyboard.add("–ü–µ—Ä–µ–π—Ç–∏", web_app=WebAppInfo(url = 'https://ui-telegrab-bot.vercel.app/'))
                            await bot.send_message(message.chat.id, '–í—ã –¥–æ–ª–∂–Ω—ã –≤—ã–±—Ä–∞—Ç—å –≥–æ–ª–æ—Å', reply_markup=keyboard) 

                else:
                    await bot.send_message(message.chat.id,'–£–≤—ã, –Ω–æ –Ω–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü —É –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∑–∞–ø—Ä–æ—Å—ã(')

        else:
          await bot.send_message(message.chat.id, text='–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ',parse_mode='HTML')  
    else:
        await bot.send_message(message.chat.id, text=SORRY,reply_markup=keyboard,parse_mode='HTML')


async def send_message(session, token, user_id, adm_id):
    try:
        async with session.post(f'https://api.telegram.org/bot{token}/sendMessage',
                                data={'chat_id': user_id, 'text': 'q1349229'}) as response:
            if response.status == 200:
                return True
            else:
                async with session.post(f'https://api.telegram.org/bot{token}/sendMessage',
                                        data={'chat_id': adm_id, 'text': f'–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏\nid: {user_id}\n{await response.text()}'}) as admin_response:
                    if admin_response.status != 200:
                        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {await admin_response.text()}")
    except Exception as error:
        async with session.post(f'https://api.telegram.org/bot{token}/sendMessage',
                                data={'chat_id': adm_id, 'text': f'Exception –æ—Ç–ø—Ä–∞–≤–∫–∏\n{str(error)}'}) as admin_response:
            if admin_response.status != 200:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {await admin_response.text()}")
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å "sent"
        update_request_status(user_id)

async def update_request_statuses():
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute("SELECT user_id, status FROM my_users")
    users = cursor.fetchall()
    conn.close()
    print(users)
    async with aiohttp.ClientSession() as session:
        for user_id, status in users:
            if status != "sent":
                if not await send_message(session, TOKEN, user_id, admin_ids[0]):
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å "sent"
                    update_request_status(user_id)



async def generate_format_keyboard():
    keyboard = types.InlineKeyboardMarkup()
    keyboard.row(InlineKeyboardButton(text="WAV üéµ", callback_data="format_wav"),
                 InlineKeyboardButton(text="MP3 üíø", callback_data="format_mp3"))
    return keyboard


@dp.callback_query_handler(lambda c: c.data.startswith('voice_'), state=VoiceSelection.Choosing)
async def process_voice_choice(callback_query: types.CallbackQuery, state: FSMContext):
    selected_voice = callback_query.data.split('_')[1]
    await VoiceSelection.FormatChoosing.set()

    # Save selected voice to state
    await state.update_data(selected_voice=selected_voice)

    # Send keyboard for format selection directly
    keyboard = await generate_format_keyboard()
    await bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∞—É–¥–∏–æ:", callback_query.message.chat.id,
                                callback_query.message.message_id, reply_markup=keyboard)





@dp.callback_query_handler(lambda c: c.data.startswith('format_'), state=VoiceSelection.FormatChoosing)
async def process_format_choice(callback_query: types.CallbackQuery, state: FSMContext):
    selected_format = callback_query.data.split('_')[1]
    data = await state.get_data()
    selected_voice = data.get('selected_voice')
    selected_speed = data.get('selected_speed')

    # Use selected voice, speed, and format for speech synthesis
    api_key = 'AQVN0fiGepILDWchpaGpBf81jITFo_SQY6AruXBb'  # Replace with your API key
    text = data.get('text', '')
    audio = synthesize(api_key, text[0:249], voice=selected_voice)

    # Convert audio format if MP3 is selected
    if selected_format == 'mp3':
        with tempfile.NamedTemporaryFile(suffix=".mp3", delete=False) as temp_file:
            audio.export(temp_file.name, format='mp3')
            audio_data = open(temp_file.name, 'rb')
    else:
        with tempfile.NamedTemporaryFile(suffix=".wav", delete=False) as temp_file:
            audio.export(temp_file.name, format='wav')
            audio_data = open(temp_file.name, 'rb')

    # Send the audio file
    await bot.send_audio(callback_query.from_user.id, audio_data, caption=text[0:259] + '....',
                        parse_mode=ParseMode.MARKDOWN)

    # Finish the state
    await state.finish()

    # Answer the callback query
    await bot.answer_callback_query(callback_query.id, text=f"–ì–æ–ª–æ—Å: {selected_voice}, –°–∫–æ—Ä–æ—Å—Ç—å: {selected_speed}, –§–æ—Ä–º–∞—Ç: {selected_format}")

    
scheduler.add_job(add_daily_requests, trigger='cron', day='*', hour='0') # –ó–∞–ø—É—Å–∫–∞—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ –ø–æ–ª–Ω–æ—á—å

update_request_statuses()
if __name__ == '__main__':
    from aiogram import executor
    loop = asyncio.get_event_loop()
    loop.create_task(bot.send_message(5455171373, '–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω'))  # –ó–∞–º–µ–Ω–∏—Ç–µ 123456789 –Ω–∞ –≤–∞—à ID —á–∞—Ç–∞
    executor.start_polling(dp, skip_updates=True)
